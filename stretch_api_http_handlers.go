package main

import (
	"fmt"
	"net/http"
	"time"

	"github.com/David-solly/mxbcode/pkg/cache"
	"github.com/David-solly/mxbcode/pkg/models"
	"github.com/go-chi/chi"
)

var (

	// RequestCache : A cache to store the http response into for 'cacheDuration' time
	// Used to track repeat requests and aids in Idempotency
	RequestCache  = cache.Cache{}
	cacheDuration = time.Duration(time.Minute * 2) //how long to cache the result for

	idsToGenerate = int64(100)
)

// GenerateBatchHTTPHandler : Idempotent generate endpoint
// each request needs a uniqe key from the production system
// this can be a random number or letter or combination thereof
// - The first request should be sent with 1,
// - The Next request should be sent with 2,
// - The Next request should be sent with 3,
// future requests made within 'cacheDuration' of each other with the same key
// will return the same cached results that were generated by a previous request
func GenerateBatchHTTPHandler(w http.ResponseWriter, r *http.Request) {
	requestKey := createRequestIDKey(r)
	rq, found, _ := RequestCache.Client.ReadCache(requestKey) //check cache for existing request
	if found {
		write(w, []byte(rq), http.StatusOK) //return cached result
		return
	}

	data :=  runGenerator(idsToGenerate) // Generate the  DevEUIs
	// store generated results temporarily
	// in case of multiple requests
	RequestCache.Client.StoreDUIDGenResponse(models.ApiResponseCacheObject{Key: requestKey, Response: data, Timeout: cacheDuration})
	write(w, []byte(data), http.StatusOK)
}

// LookupShortcodeHTTPHandler : The handler responsible for device lookup
// supply a 5 digit shortcode - returns the full device id
func LookupShortcodeHTTPHandler(w http.ResponseWriter, r *http.Request) {
	shortCode := chi.URLParam(r, "shortcode")
	if validShortcode := shortcodeValidator(w, shortCode); !validShortcode {
		return
	}

	fullDeviceID, found, _ := RequestCache.Client.ReadCache(shortCode) // check if shotrcode exists
	if !found {
		errorMessage := fmt.Sprintf("shortcode - %v is Not Found", shortCode)
		write(w, toJSON("error", errorMessage), http.StatusUnprocessableEntity)
		return
	}

	// return the found device ID to the user
	write(w, toJSON("deveui", fullDeviceID), http.StatusOK)
}

// StatusHTTPHandler : basic endpoint to signal api is ok
func StatusHTTPHandler(w http.ResponseWriter, r *http.Request) {
	write(w, toJSON("status", "API is up"), http.StatusOK)
}
